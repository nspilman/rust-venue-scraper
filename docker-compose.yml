services:
  # Lightweight GraphQL API server - reads from shared database
  graphql:
    build: 
      context: .
      dockerfile: sms-graphql/Dockerfile
    image: sms-graphql:latest
    container_name: sms_graphql
    ports:
      - "8080:8080"   # GraphQL API
    environment:
      - RUST_LOG=info
      - LIBSQL_URL=${LIBSQL_URL}
      - LIBSQL_AUTH_TOKEN=${LIBSQL_AUTH_TOKEN}
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/health"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Web frontend - communicates with GraphQL via HTTP
  web:
    build: 
      context: .
      dockerfile: sms-web/Dockerfile
    image: sms-web:latest
    container_name: sms_web
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - GRAPHQL_URL=http://graphql:8080/graphql
    depends_on:
      graphql:
        condition: service_healthy
    restart: unless-stopped

  # Full scraper with processing pipeline - writes to shared database
  scraper:
    build: 
      context: .
      dockerfile: sms-scraper/Dockerfile
    image: sms-scraper:latest
    container_name: sms_scraper
    profiles: ["scraper"]  # Only run when explicitly requested
    ports:
      - "9898:9898"   # Metrics endpoint
    environment:
      - RUST_LOG=info
      - LIBSQL_URL=${LIBSQL_URL}
      - LIBSQL_AUTH_TOKEN=${LIBSQL_AUTH_TOKEN}
      - SMS_PUSHGATEWAY_URL=http://pushgateway:9091
    volumes:
      - ./data:/app/data
    depends_on:
      - pushgateway
    restart: unless-stopped

  # One-off scraper job
  scraper-job:
    image: sms-scraper:latest
    profiles: ["disabled"]
    environment:
      - SMS_PUSHGATEWAY_URL=http://pushgateway:9091
      - RUST_LOG=info
      - LIBSQL_URL=${LIBSQL_URL}
      - LIBSQL_AUTH_TOKEN=${LIBSQL_AUTH_TOKEN}
    volumes:
      - ./data:/app/data
    depends_on:
      - pushgateway
    command: ["ingester", "--apis", "blue_moon,sea_monster", "--bypass-cadence"]

  # Monitoring stack
  pushgateway:
    image: prom/pushgateway:latest
    container_name: pushgateway
    ports:
      - "9091:9091"
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./ops/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=15d
      - --storage.tsdb.retention.size=5GB
    ports:
      - "9090:9090"
    depends_on:
      graphql:
        condition: service_healthy

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./ops/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus

volumes:
  prometheus_data: