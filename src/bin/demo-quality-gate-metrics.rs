//! Demo script to simulate quality gate metrics
//! 
//! This script demonstrates the quality gate metrics by simulating
//! quality assessment results that would be generated by the quality gate.

use std::time::Duration;
use rand::Rng;

// Import the quality gate metrics module
use sms_scraper::observability::metrics::quality_gate;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Initialize metrics system with pushgateway support
    sms_scraper::observability::metrics::init()?;
    
    println!("🔍 Simulating quality gate processing...");
    
    // Simulate processing 3 batches of records
    for batch_num in 1..=3 {
        println!("📊 Processing batch {}", batch_num);
        
        let mut rng = rand::thread_rng();
        
        // Simulate batch size (between 20-50 records per batch)
        let batch_size = rng.gen_range(20..=50);
        let mut accepted = 0;
        let mut accepted_with_warnings = 0;
        let mut quarantined = 0;
        
        // Process each record in the batch
        for _ in 0..batch_size {
            // Simulate quality assessment
            let quality_score = rng.gen_range(0.0..=1.0);
            quality_gate::quality_score_recorded(quality_score);
            
            if quality_score >= 0.8 {
                // High quality - accept
                quality_gate::record_accepted();
                accepted += 1;
            } else if quality_score >= 0.6 {
                // Medium quality - accept with warnings
                quality_gate::record_accepted_with_warnings();
                accepted_with_warnings += 1;
                
                // Generate some quality issues
                let issue_types = ["missing_venue_address", "unclear_event_time", "duplicate_artist_name"];
                let issue_type = issue_types[rng.gen_range(0..issue_types.len())];
                quality_gate::issue_detected(issue_type, "warning");
            } else {
                // Low quality - quarantine
                quality_gate::record_quarantined();
                quarantined += 1;
                
                // Generate quality issues for quarantined records
                let issue_types = ["invalid_date_format", "missing_required_field", "data_corruption"];
                let issue_type = issue_types[rng.gen_range(0..issue_types.len())];
                let severity = if quality_score < 0.3 { "critical" } else { "error" };
                quality_gate::issue_detected(issue_type, severity);
            }
        }
        
        // Record batch processing stats
        quality_gate::batch_processed(batch_size, accepted, quarantined);
        
        println!("  📈 Batch {} results:", batch_num);
        println!("    - Total records: {}", batch_size);
        println!("    - Accepted: {}", accepted);
        println!("    - Accepted with warnings: {}", accepted_with_warnings);
        println!("    - Quarantined: {}", quarantined);
        
        // Small delay between batches
        tokio::time::sleep(Duration::from_millis(100)).await;
    }
    
    println!("✅ Quality gate simulation complete!");
    println!("🌐 Check Grafana at http://localhost:3000 to see the metrics");
    
    Ok(())
}
